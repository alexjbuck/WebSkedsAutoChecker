#!/bin/bash

######### Dependency Checking #########
if [ ! $(which phantomjs) ]; then
  echo "I cannot find phantomjs on your path."
  echo "Please download and/or install it first."
  echo "Exiting..."
  echo
  exit 1
fi
if [ ! $(which curl) ]; then
  echo "I cannot find cURL on your path."
  echo "Please download and/or install it first."
  echo "Exiting..."
  echo
  exit 2
fi

# Flags
FORCE=false
SILENT=false
GOTSKED=false
GOTFP=true
SUPPRESSSMS=false
SUPPRESSGD=false

declare -i JULIAN
declare -i CALDATE
declare -i JDATE2CALDATE
declare -i CALDATEminusONE
JDATE2CALDATE=5113

B='\033[1m'
U='\033[4m'
N='\033[0m'
usage(){
  echo -e "
"$B"SKEDS"$N" 0.2.0, a CNATRA schedule checking/notification program

"$B"Usage:"$N"  skeds [-f] [-s] [-v] [-sq SQUADRON] [-tw TRAWING]
              [-n NAME] [-pn PHONENUMBER] [-gd GOOGLEDRIVEDIR]
              [-st SLEEPTIME] [-ps POLLSTART] [-pu POLLUNTIL]
              [--fpdir FPDIR] [--pngdir PNGDIR]
        skeds -c CONFIGFILE [-f,s,v,sq,tw,n,pn,gd,st,ps,pu... VALUE]
        skeds -h
        skeds --help

"$B"Optional Flags:"$N"
    -h, --help      Show the usage information
    -f, --force     Force downloading of schedule/front paage even if they have
                      already been downloaded.
    -v, --verbose   Print more verbose output statements
    -s, --silent    Suppres all output statements (overrides -v). Logs output to 'log'

"$B"Key/Value Parameters:"$N"
    -c,--config "$U"configfile"$N" [-key VALUE]
              Provide a configuration file that has a single line with the properly
              formatted key/value pairs.
              e.g. '-sq VT-6 -tw tw5 -n smith -pn 2345678989 ...'
              Any key/value pair supplied directly on the command line will override
              the values within the configuration file

    -sq,--squadron "$U"squadron"$N"
              Set the user squadron (e.g. 'VT-6', 'HT-8')

    -tw,--trawing "$U"trawing"$N"
              Set the user training wing (e.g. tw5, TW5, TW1)

    -n,--name "$U"name"$N"
              Set the user name for schedule filtering

    -pn,--phonenumber "$U"number"$N"
              Set the user phone number for SMS notification

    -gd,-googledrive "$U"directory"$N"
              Set location of the user google drive directory

    -st,--sleeptime "$U"seconds"$N"
              Set sleep duration between subsequent polling attempts

    -ps,--pollstart "$U"hour"$N"
              Set what hour (24 hour) the polling for the next days schedule begins

    -pu,--polluntil "$U"hour"$N"
              Set what hour (24 hour) the polling for the current days schedule ends

    --fpdir "$U"directory"$N"
              Set the directory where the Frontpage will be saved

    --pngdir "$U"directory"$N"
              Set the directory where the schedule snapshots will be saved

    --suppress-sms
              Suppress SMS sending, even if a phone number is supplied

    --suppress-gd
              Suppress Google Drive functionality, even if a directory is supplied
    "
}

if [ "$#" -eq 0 ]; then
  usage
  exit 1
fi

while [ "$#" -gt 0 ]; do
  key="$1"
  shift
  case $key in
    -c|--config)
      config="$1"
      shift
      ./skeds $(cat "$config") "$*" &
      exit 1;;
    -h|--help)
      usage
      exit 1;;
    -f|--force)
      FORCE=true
      ;;
    -v|--verbose)
      VERBOSE=true
      ;;
    -s|--silent)
      SILENT=true
      ;;
    --suppress-sms)
      SUPPRESSSMS=true
      ;;
    --suppress-gd)
      SUPPRESSGD=true
      ;;
    -sq|--squadron)
      SQUADRON="$1"
      shift;;
    -n|--name)
      NAME="$1"
      shift;;
    -pn|--phonenumber)
      PHONENUM="$1"
      shift;;
    -gd|--googledrive)
      GOOGLEDRIVEDIR="$1"
      shift;;
    -st|--sleeptime)
      SLEEPTIME="$1"
      shift;;
    -ps|--pollstart)
      POLLSTART="$1"
      shift;;
    -pu|--polluntil)
      POLLUNTIL="$1"
      shift;;
    --fpdir)
      FPDIR="$1"
      shift;;
    --pngdir)
      PNGDIR="$1"
      shift;;
  esac
done

if [ ! "$GOOGLEDRIVEDIR" ] && [ ! "$PHONENUM" ]; then
  echo "Incorrect usage. Either a google drive directory or a phone number MUST be supplied. 'skeds --help' for more information"
  exit 1
fi

################################################################################
################################## main ########################################
################################################################################
main(){
echo ''
echo '************        Skeds        ************'
echo '*             by Alexander Buck             *'
echo '*********************************************'

# The CALDATE is the number of days since 1 January, 2000
# caldate=$((   (( $(date -v+1d +%s) - $(date -j 010100002000 +%s) ))/(24*3600)  ))

# Begin polling loop
while : ; do

  if [ $(date +%H) -lt $POLLUNTIL ]; then
    if [ "$GOTSKED" = false ] || [ "$GOTFP" = false ]; then
      # Set the date for the current day
      JULIAN=$(date +%j)
      DATESTR=$(date +%Y-%m-%d)
    else
      # I already have both, set the date for the next day
      JULIAN=$(date -d tomorrow +%j)
      DATESTR=$(date -d tomorrow +%Y-%m-%d)
    fi
  else
    # Its after "$SEARCHUNTIL" time, so give up on today and move to tomorrow
    JULIAN=$(date -d tomorrow +%j)
    DATESTR=$(date -d tomorrow +%Y-%m-%d)
  fi

  # Conversion: 5245 == Julian Date 132 (May 12th, 2014)
  # (I believe January 1st, 2000 is CALDATE 1)
  CALDATE=JULIAN+5113
  CALDATEminusONE=CALDATE-1
  echo "** Searching for Front Page and/or Schedule for $DATESTR"

  ## Check the PNGDIR for old files (not today nor yesterday's schedule)
  for i in $NAME/$PNGDIR/*; do
    if [[ "$i" != ""$NAME"/"$PNGDIR"/"$CALDATE"page4.png" && "$i" != ""$NAME"/"$PNGDIR"/"$CALDATE"page3.png" && "$i" != ""$NAME"/"$PNGDIR"/"$CALDATEminusONE"page4.png" && "$i" != ""$NAME"/"$PNGDIR"/"$CALDATEminusONE"page3.png" ]]; then
      rm $i
    fi
  done


###########################
### DOWNLOAD FRONT PAGE ###
###########################
## Only download frontpage if its going to get posted somewhere.
if [ "$GOOGLEDRIVEDIR" ]; then
  if [ -f "$NAME"/"$FPDIR"/\$"$DATESTR"\$"$SQUADRON"\$Frontpage.pdf ] && [ $FORCE == false ]
  then
    echo '++ Front page already downloaded.'
    GOTFP=true
  else
    GOTFP=false
    echo '**'
    echo '** Downloading the front page.'
    echo '**'

    URL=http://www.cnatra.navy.mil/scheds/"$TRAWING"/SQ-"$SQUADRON"/\$"$DATESTR"\$"$SQUADRON"\$Frontpage.pdf

    curl -s -S --create-dirs --fail -o "$NAME"/"$FPDIR"/\$"$DATESTR"\$"$SQUADRON"\$Frontpage.pdf "$URL"

    if [ $? -eq 0 ];then
       echo "++ Successfully downloaded front page."
       if [ "$GOOGLEDRIVEDIR" ]; then
         echo "++ Copying to google drive for sharing"
         if [ ! "$SUPPRESSGD" == false ]; then
           cp "$NAME"/"$FPDIR"/\$"$DATESTR"\$"$SQUADRON"\$Frontpage.pdf "$GOOGLEDRIVEDIR""$FPDIR"
         fi
       fi
       if [ "$PHONENUM" ]; then
         echo "++ Sending SMS notification."
         if [ "$SUPPRESSSMS" == false ]; then
           curl http://textbelt.com/text -d number="$PHONENUM" -d message="Front page for $DATESTR now on Google Drive."
         fi
       fi
    else
       echo "xx"
       echo "xx Failed to download front page."
       echo "xx"
    fi
  fi
else
  # So it doesn't get stuck thinking it doesn't have the FrontPage but being unable to download it
  GOTFP=true
fi


#########################
### DOWNLOAD SCHEDULE ###
#########################
  if [  -f ./"$NAME"/"$PNGDIR"/"$CALDATE"\page3.png  -a  -f ./"$NAME"/"$PNGDIR"/"$CALDATE"\page4.png ] && [ $FORCE == false ]; then
    echo "++ Schedule already downloaded."
    GOTSKED=true
  else
    GOTSKED=false
    echo '**'
    echo '** Downloading schedule.'
    echo '**'

    phantomjs singleCheck.js --julian $JULIAN --name $NAME --squadron $SQUADRON --pngdir $PNGDIR

    if [ $? -eq 0 ];then
       echo "++ Successfully downloaded schedule."
       if [ "$GOOGLEDRIVEDIR" ]; then
         echo "++ Copying to google drive for sharing"
         if [ ! "$SUPPRESSGD" == false ]; then
           cp "$NAME"/"$PNGDIR"/"$CALDATE"page{3,4}.png "$GOOGLEDRIVEDIR""$PNGDIR"
         fi
       fi
       if [ "$PHONENUM" ]; then
         echo "++ Sending SMS notification."
         if [ "$SUPPRESSSMS" == false ]; then
           curl http://textbelt.com/text -d number="$PHONENUM" -d message="'$DATESTR // $(cat $NAME/schedule)'"
         fi
       fi
    else
       echo "xx"
       echo "xx Failed to download schedule."
       echo "xx"
    fi
  fi


  if [[ "$GOTSKED" == true && "$GOTFP" == true ]] && [[ "$DATESTR" != $(date +%Y-%m-%d) ]]; then
    # We have both FP/Sked for tomorrow, sleep until tomorrow start time
    SLEEPUNTILTIME=$(date -d ""$POLLSTART"00 tomorrow")
    SLEEPUNTILTIMESEC=$(date -d ""$POLLSTART"00 tomorrow" +%s)
  elif [[ "$GOTSKED" == false || "$GOTFP" == false ]] && [[ "$DATESTR" != $(date +%Y-%m-%d) || $(date +%H) -lt "$POLLUNTIL" ]]; then
    # We don't have both, and its either not yet tomorrow, or tomorrow before stop time, sleep 60 seconds
    SLEEPUNTILTIME=$(date -d ""$SLEEPTIME" seconds")
    SLEEPUNTILTIMESEC=$(date -d ""$SLEEPTIME" seconds" +%s)
  else
    # All other cases, sleep until today at start time (derived from logic table analysis)
    SLEEPUNTILTIME=$(date -d ""$POLLSTART"00")
    SLEEPUNTILTIMESEC=$(date -d ""$POLLSTART"00" +%s)
  fi


  echo "It is now $(date), sleeping until $SLEEPUNTILTIME"
  echo "zzz... "
  while (( ( $(date +%s)<$SLEEPUNTILTIMESEC ) )); do
    sleep "$SLEEPTIME"
  done
  echo " ...yawn"
  echo ""
  echo ""
  echo "************************************************************************"

done
}
################################################################################


################################################################################
################################ timestamp #####################################
################################################################################
timestamp() {
  if [ $# -gt 0 ]; then
    # command line input mode
    echo $(date +'[%Y-%m-%d] %H:%M:%S >>') "$*"
  else
    # pipe mode
    while :
    do
      if read -t 1 input ; then
        echo $(date +'[%Y-%m-%d] %H:%M:%S >>') "$input"
      fi
    done
  fi
}
################################################################################

if [ ! -d "$NAME" ]; then
  mkdir "$NAME"
fi

if [ "$SILENT" = true ]; then
  main 2>&1 | timestamp > ./"$NAME"/log
else
  main
fi
